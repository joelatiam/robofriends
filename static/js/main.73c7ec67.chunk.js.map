{"version":3,"sources":["components/errorBoundary/errorBoundary.component.js","components/scroll/scroll.component.js","components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","containers/App.js","serviceWorker.js","index.js"],"names":["ErrorBoundary","props","state","hasError","error","errorInfo","this","setState","children","Component","Scroll","style","overflowY","border","height","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","e","searchFields","target","value","fetch","then","res","json","filteredRobots","filter","robot","toLowerCase","includes","toLocaleLowerCase","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"8TAEsBA,E,kDAClB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,UAAU,GAJA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAGG,KAAKJ,MAAMC,SAEN,2CAGDG,KAAKL,MAAMO,a,GApBkBC,a,MCCrC,SAASC,EAAT,GAA8B,IAAZF,EAAW,EAAXA,SAErB,OACI,yBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEN,GCLN,IAAMO,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,GAAf,OAChB,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACI,4BAAKL,GACL,2BAAIC,M,MCFT,SAASK,EAAT,GAA8B,IAAVC,EAAS,EAATA,OAEvB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAOD,EAAGR,GAAMO,EAAKP,GAAIF,KAAQS,EAAKT,KAAMC,MAASQ,EAAKR,Y,MCT/E,SAASW,EAAT,GAAiD,EAA5BC,YAA6B,IAAhBC,EAAe,EAAfA,aAErC,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,eACZC,SAAUH,K,UCuCXI,E,kDA3Cb,aAAc,IAAD,8BACX,gBAaFC,eAAkB,SAACC,GACjB,EAAK7B,SAAS,CAAC8B,aAAcD,EAAEE,OAAOC,SAbtC,EAAKrC,MAAQ,CACXqB,OAAO,GACPc,aAAc,IAJL,E,gEAQO,IAAD,OACjBG,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAlB,GAAM,OAAI,EAAKhB,SAAS,CAACgB,gB,+BAOxB,IAAD,EACuBjB,KAAKJ,MAA7BqB,EADC,EACDA,OAAQc,EADP,EACOA,aAETO,EAAiBrB,EAAOsB,QAAO,SAACC,GACpC,OAAOA,EAAM9B,KAAK+B,cAAcC,SAASX,EAAaY,wBAExD,OAAI1B,EAAO2B,OAAS,EAEhB,wBAAI/B,UAAU,MAAd,uBAIF,yBAAKA,UAAU,UACb,wBAAIA,UAAU,MAAd,eACA,kBAACS,EAAD,CAAWE,aAAgBxB,KAAK6B,iBAChC,kBAACzB,EAAD,KACE,kBAAC,EAAD,KACE,kBAACY,EAAD,CAAUC,OAAUqB,W,GApCdnC,aCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACL+D,QAAQ/D,MAAMA,EAAMgE,c","file":"static/js/main.73c7ec67.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class  ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true });\n      }\n\n    render(){\n\n        if(this.state.hasError){\n            return (\n                <h1>OOOPS Error</h1>\n            )\n        }\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport './scroll.css';\n\nexport function Scroll ({children}) {\n\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n            {children}\n        </div>\n    )\n}\n","import React from 'react';\n\nexport const Card = ({name, email, id}) => (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?size=200x200`} alt='robot'/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n);\n\n","import React from 'react';\nimport {Card} from '../card/card.component';\n\nimport './card-list.css';\n\nexport function CardList ({robots}) {\n\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key = {i} id = {user.id} name = {user.name} email = {user.email}\n                         />                           \n                    )\n                })\n            }\n        </div>\n \n    );\n}\n","import React from 'react';\n\nimport './search-box.css';\n\nexport function SearchBox ({searchField, searchChange}) {\n\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robot'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n","import React, { Component } from 'react';\nimport ErrorBoundary from '../components/errorBoundary/errorBoundary.component'\nimport { Scroll } from '../components/scroll/scroll.component';\nimport { CardList } from '../components/card-list/card-list.component';\nimport {SearchBox} from '../components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      robots:[],\n      searchFields: '',\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(robots => this.setState({robots}))\n  }\n\n  onSearchChange =  (e) => {\n    this.setState({searchFields: e.target.value})\n  }\n\n  render () {\n    const {robots, searchFields} = this.state;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchFields.toLocaleLowerCase())\n    })\n    if(!robots.length > 0){\n      return (\n        <h1 className=\"tc\">RoboFriends Loading</h1>\n      )\n    }\n    return (\n      <div className=\"App tc\">\n        <h1 className=\"f2\">Robofriends</h1>\n        <SearchBox searchChange = {this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots = {filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}