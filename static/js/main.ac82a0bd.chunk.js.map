{"version":3,"sources":["redux/reducers/reducers.js","components/errorBoundary/errorBoundary.component.js","components/scroll/scroll.component.js","components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","components/header/header.component.js","containers/App.js","redux/actions/actions.js","redux/constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchFields","initialStateRobots","isPending","robots","error","ErrorBoundary","props","state","hasError","errorInfo","this","setState","children","Component","Scroll","style","overflowY","border","height","Card","name","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Header","nextProps","nextState","console","log","App","onRequestRobot","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","toLocaleLowerCase","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","fetch","then","res","json","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducers","combineReducers","action","obj","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac82a0bd.chunk.js","sourcesContent":["import * as constants from '../constants';\n\nconst initialStateSearch = {\n    searchFields: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action ={}) => {\n    switch(action.type) {\n        case(constants.CHANGE_SEARCH_FIELD):\n            const obj = { ...state, searchFields: action.payload };\n            return obj;\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: '',\n};\n\nexport const requestRobots = (state = initialStateRobots, action ={}) => {\n    let obj = undefined;\n    switch(action.type) {\n        case(constants.REQUEST_ROBOT_PENDING):\n            obj = { ...state, isPending: true };\n            return obj;\n        case(constants.REQUEST_ROBOT_SUCCESS):\n            obj = { ...state, isPending: false, robots: action.payload };\n            return obj;\n        case(constants.REQUEST_ROBOT_FAILED):\n            obj = { ...state, isPending: false, error: action.payload };\n            return obj;\n        default:\n            return state;\n    }\n}\n","import React, {Component} from 'react';\n\nexport default class  ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true });\n      }\n\n    render(){\n\n        if(this.state.hasError){\n            return (\n                <h1>OOOPS Error</h1>\n            )\n        }\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport './scroll.css';\n\nexport function Scroll ({children}) {\n\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px' }}>\n            {children}\n        </div>\n    )\n}\n","import React from 'react';\n\nexport const Card = ({name, email, id}) => (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?size=200x200`} alt='robot'/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n);\n\n","import React from 'react';\nimport {Card} from '../card/card.component';\n\nimport './card-list.css';\n\nexport function CardList ({robots}) {\n\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key = {i} id = {user.id} name = {user.name} email = {user.email}\n                         />                           \n                    )\n                })\n            }\n        </div>\n \n    );\n}\n","import React from 'react';\n\nimport './search-box.css';\n\nexport function SearchBox ({searchChange}) {\n\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robot'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n","import React , {Component}from 'react';\n\nexport default class Header extends Component{\n    shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }\n    render(){\n        console.log('Header')\n        return(\n            <h1 className=\"f2\">Robofriends</h1>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport ErrorBoundary from '../components/errorBoundary/errorBoundary.component'\nimport {connect} from 'react-redux';\nimport * as actions from '../redux/actions/actions'\nimport { Scroll } from '../components/scroll/scroll.component';\nimport { CardList } from '../components/card-list/card-list.component';\nimport {SearchBox} from '../components/search-box/search-box.component';\nimport Header from '../components/header/header.component';\n\n\nimport './App.css';\n\nfunction mapStateToProps(state){\n  return {\n    searchFields: state.searchRobots.searchFields,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    onSearchChange: (e) => dispatch(actions.setSearchField(e.target.value)),\n    onRequestRobot: () => dispatch(actions.requestRobots()),\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.onRequestRobot();\n  }\n\n  render () {\n    const {searchFields, onSearchChange, robots, isPending} = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchFields.toLocaleLowerCase())\n    })\n    if(isPending){\n      return (\n        <h1 className=\"tc\">RoboFriends Loading</h1>\n      )\n    }\n    return (\n      <div className=\"App tc\">\n        <Header/>\n        <SearchBox searchChange = {onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots = {filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import * as constants from '../constants';\n\nexport function setSearchField (text) {\n    return {\n        type: constants.CHANGE_SEARCH_FIELD,\n        payload: text,\n    }; \n}\n\nexport function requestRobots(){\n    return function (dispatch) {\n        dispatch({type: constants.REQUEST_ROBOT_PENDING});\n        fetch('https://jsonplaceholder.typicode.com/users')\n          .then(res => res.json())\n          .then(robots => dispatch({\n            type: constants.REQUEST_ROBOT_SUCCESS,  \n            payload: robots,\n            }))\n            .catch(error => dispatch({\n                type: constants.REQUEST_ROBOT_FAILED,  \n                payload: error,\n                }))\n    }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOT_PENDING = 'REQUEST_ROBOT_PENDING';\nexport const REQUEST_ROBOT_SUCCESS = 'REQUEST_ROBOT_SUCCESS';\nexport const REQUEST_ROBOT_FAILED = 'REQUEST_ROBOT_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\n// import {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './redux/reducers/reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst rootReducers = combineReducers({searchRobots, requestRobots})\n\n// const logger = createLogger();\n\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}